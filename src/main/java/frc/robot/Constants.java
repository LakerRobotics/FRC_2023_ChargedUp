// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package frc.robot;

import edu.wpi.first.math.kinematics.DifferentialDriveKinematics;
import edu.wpi.first.math.util.Units;

/**
 * The Constants class provides a convenient place for teams to hold robot-wide numerical or boolean
 * constants.  This class should not be used for any other purpose.  All constants should be
 * declared globally (i.e. public static).  Do not put anything functional in this class.
 *
 * <p>It is advised to statically import this class (or one of its inner classes) wherever the
 * constants are needed, to reduce verbosity.
 */
public class Constants {
   
    public static final class DriveTrainConstants {
      public static final int kLeftMotor1CANID = 19;
      public static final int kLeftMotor2CANID = 16;
      public static final int kLeftMotor3CANID = 15;
      public static final int kRightMotor1CANID = 20;
      public static final int kRightMotor2CANID = 1; 
      public static final int kRightMotor3CANID = 2;

      //limit Current to avoid drawing batter too low & getting chatter
      public static final int SparkMaxCurrentLimit = 30
      ;

    
      //sysID values
      public static final double ksVolts = 0.2236;
      public static final double kvVoltSecondsPerMeter = 1.5654;
      public static final double kaVoltSecondsSquaredPerMeter = 0.22128;
      public static final double kpDriveVel = 0.023927;

      // differential drive kinmatics
      public static final double kTrackWidthMeters = Units.inchesToMeters(24);
      public static final DifferentialDriveKinematics kDriveKinematics = new DifferentialDriveKinematics(kTrackWidthMeters);

      //max velocity and accleration
      public static final double kMaxSpeedMetersPerSecond = 3;
      public static final double kMaxAccelerationMetersPerSecondSquared = 3;

      //Reasonable baseline values for a RAMSETE follower in units of meters and seconds
      public static final double kRamsetB = 2;
      public static final double kRamseteZeta = 0.7;

      //Gear Ratio
      public static final double kGearRatio = 8.5;
      public static final double kWheelRadiusInches = 3;
      
      // converting ticks to meters
      public static final double kLinearDistanceConversionFactor = (Units.inchesToMeters(1/(kGearRatio*2*Math.PI*Units.inchesToMeters(kWheelRadiusInches))*10));
    }

    public static final class Intake {

      /*** How many amps the intake can use while picking up*/
      public static final int INTAKE_CURRENT_LIMIT_A = 25;
      /*** Percent output for intaking */
      public static final double INTAKE_AND_OUTPUT_POWER = 1.0;
      public static final double OUTPUT_CUBE_POWER = 0.6;

      /*** Percent output for holding */
      public static final double HOLD_POWER = 0.1;
      /*** How many amps the intake can use while holding */
      public static final int HOLD_CURRENT_LIMIT_A = 5;
    }
    
    public static final class ArmConstants {
      /*** How many amps the arm motor can use.*/
      public static final int ARM_CURRENT_LIMIT_A = 40;
      /*** Percent output to run the arm up/down at*/
      public static final double ARM_OUTPUT_POWER = 0.4;
      public static final double ARM_OUTPUT_POWER_AUTON = 0.55;
}


}
  