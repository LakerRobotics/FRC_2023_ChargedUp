// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMax; 
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax cANSparkMAXleft1;
private CANSparkMax cANSparkMAXleft2;
private PWMSparkMax driveTrainLeft;
private PWMSparkMax driveTrainLeft2;
private MotorControllerGroup driveTrainGroupLeft;
private CANSparkMax cANSparkMAXright1;
private CANSparkMax cANSparkMAXright2;
private PWMSparkMax driveTrainRight;
private PWMSparkMax driveTrainRight2;
private MotorControllerGroup driveTrainGroupRight;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
cANSparkMAXleft1 = new CANSparkMax(18, MotorType.kBrushless);
 
 

cANSparkMAXleft2 = new CANSparkMax(19, MotorType.kBrushless);
 
 

driveTrainLeft = new PWMSparkMax(0);
 addChild("DriveTrainLeft",driveTrainLeft);
 driveTrainLeft.setInverted(false);

driveTrainLeft2 = new PWMSparkMax(2);
 addChild("DriveTrainLeft2",driveTrainLeft2);
 driveTrainLeft2.setInverted(false);

driveTrainGroupLeft = new MotorControllerGroup(driveTrainLeft, driveTrainLeft2  );
 addChild("DriveTrainGroupLeft",driveTrainGroupLeft);
 

cANSparkMAXright1 = new CANSparkMax(0, MotorType.kBrushless);
 
 

cANSparkMAXright2 = new CANSparkMax(1, MotorType.kBrushless);
 
 

driveTrainRight = new PWMSparkMax(1);
 addChild("DriveTrainRight",driveTrainRight);
 driveTrainRight.setInverted(false);

driveTrainRight2 = new PWMSparkMax(3);
 addChild("DriveTrainRight2",driveTrainRight2);
 driveTrainRight2.setInverted(false);

driveTrainGroupRight = new MotorControllerGroup(driveTrainRight, driveTrainRight2  );
 addChild("DriveTrainGroupRight",driveTrainGroupRight);
 

differentialDrive1 = new DifferentialDrive(driveTrainGroupLeft, driveTrainGroupRight);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void arcadeDrive(double power, double turnpower) {
        differentialDrive1.arcadeDrive(power, turnpower);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

