// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Intake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class IntakeTeleop extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Intake m_intake;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private static int DO_NOTHING = 0;
    private static int INTAKE_CUBE = 1;
    private static int INTAKE_CONE = 2;
    private static int HOLD_CUBE = 3;
    private static int HOLD_CONE = 4 ;
    private static int RELEASE_CUBE = 5;
    private static int RELEASE_CONE = 6;

    private static int NOTHING = 0;
    private static int CUBE = 1;
    private static int CONE = 2;  
    private int lastGamePiece = NOTHING;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public IntakeTeleop(Intake subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_intake = subsystem;
        addRequirements(m_intake);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        // set Power to the maximum specified by the operator controller or the driver controller
        boolean intakeCubeOutputCone = RobotContainer.getInstance().getOperatorController().getRawButton(0) ;
        boolean intakeConeOutputCube = RobotContainer.getInstance().getOperatorController().getRawButton(1);

double intakePower;
int intakeAmps;
if (intakeCubeOutputCone) {
  // cube in or cone out
//  intakePower = Constants.Intake.INTAKE_AND_OUTPUT_POWER;
//  intakeAmps = Constants.Intake.CURRENT_LIMIT_A;
  m_intake.intakeCube(); 
  lastGamePiece = CUBE;
} else if (intakeConeOutputCube) {
  // cone in or cube out
//  intakePower = -INTAKE_OUTPUT_POWER;
//  intakeAmps = INTAKE_CURRENT_LIMIT_A;
  m_intake.intakeCone();
  lastGamePiece = CONE;
} else if (lastGamePiece == CUBE) {
  m_intake.holdCube();
//  intakePower = INTAKE_HOLD_POWER;
//  intakeAmps = INTAKE_HOLD_CURRENT_LIMIT_A;
} else if (lastGamePiece == CONE) {
   m_intake.holdCone();
//  intakePower = -INTAKE_HOLD_POWER;
//  intakeAmps = INTAKE_HOLD_CURRENT_LIMIT_A;
} else {
    m_intake.stop();
//  intakePower = 0.0;
//  intakeAmps = 0;
}
//setIntakeMotor(intakePower, intakeAmps);

    
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
