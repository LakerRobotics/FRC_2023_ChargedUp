// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

//package frc.robot.commands;
//import edu.wpi.first.wpilibj2.command.CommandGroupBase;
//import edu.wpi.first.wpilibj2.command.ParallelRaceGroup;
//import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
//import frc.robot.subsystems.Conveyor;
//import frc.robot.subsystems.DriveTrain;
//import frc.robot.subsystems.Intake;
//import frc.robot.subsystems.Shooter;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
//public class Autonomous2Ball_AlignToSecondBall extends SequentialCommandGroup {

    //public Autonomous2Ball_AlignToSecondBall(Intake theIntake, Shooter shooter,Conveyor theConveyor, DriveTrain theDriveTrain){

        //TODO create a startShooterLow command (so it will keep running, all during auton) and 
        //TODO create a StartIntake command

    //Reset the Gyro

        //addCommands(new GyroReset(theDriveTrain));

    //Spin up the shooter for Short Shot
    //addCommands(new ShooterMoveLowGetUpToSpeed(shooter).withTimeout(2));
//        addCommands(new ShooterMoveLow(shooter).withTimeout(2));                                     
 
    // Shoot and run the intake to deploy
       //CommandGroupBase spinAndShootAndintake = SequentialCommandGroup.parallel(
                                              //new ShooterMoveLow(shooter),
                                              //new IntakeMove(theIntake),
                                              //new ConveyorMove(theConveyor)).withTimeout(1.5);
        //addCommands(spinAndShootAndintake);

       // Turn Around
       //addCommands(new DriveTrainTurnSpinToAngle(theDriveTrain, 180/*TurnToAngle*/));   
       

       // Now that we are facing a ball on the ground turn on intake and drive towards it
       //ParallelRaceGroup driveForwardWithIntake = new ParallelRaceGroup(        
           //new DriveTrainMoveStraight(theDriveTrain, -105 /*Distance*/, 10/* Should be 1*/ /*maxSpeed ft/sec*/, 15 /*inch to get to maxSpeed*/, 180 /*Angle to drive straight on*/),
           //new IntakeMove(theIntake)
           //);   
        //addCommands(driveForwardWithIntake);

        //Turn back toward Hub,now that we have picked up the ball from the ground
        //addCommands(new DriveTrainTurnSpinToAngle(theDriveTrain, 360));
        
 
        // Drive towards the Hub, back to where we shot the first ball from
        // CommandGroupBase driveAndSpinUpShooter = SequentialCommandGroup.parallel(
        //ParallelRaceGroup driveAndSpinUpShooter = new ParallelRaceGroup(
                                            //new ShooterMoveLow(shooter),
                                            //new DriveTrainMoveStraight(theDriveTrain, -100 /*Distance*/, 10 /*maxSpeed ft/sec*/, 15 /*inch to get to maxSpeed*/, 359 /*Angle to drive straight on*/)
                                            //);
        //addCommands(driveAndSpinUpShooter);

        //CommandGroupBase spinAndShoot = SequentialCommandGroup.parallel(
                                            //new ShooterMoveLow(shooter),
                                            //new ConveyorMove(theConveyor)).withTimeout(2);
        //addCommands(spinAndShoot);

        // Drive off the tarmac
        //addCommands(new DriveTrainMoveStraight(theDriveTrain, 100 /*Distance*/, 10 /*maxSpeed ft/sec*/, 10 /*inch to get to maxSpeed*/, 360 /*Angle to drive straight on*/));
    //}

//}
