// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Constants;
//import frc.robot.RobotContainer;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.DriveTrain;
import com.analog.adis16470.frc.ADIS16470_IMU;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveTrainLock extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final DriveTrain m_driveTrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private ADIS16470_IMU m_IMU;
        
        private double lockPositionLeft;

        private double lockPositionRight;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public DriveTrainLock(DriveTrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_driveTrain = subsystem;
        addRequirements(m_driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_IMU = m_driveTrain.getIMU();
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
       lockPositionLeft = m_driveTrain.getLeftEncoderPosition();
       lockPositionRight = m_driveTrain.getRightEncoderPosition();
    
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        //double minPower=0.25;
        double maxPower=1;
       // double forwardPower= percentOfMaxTilt/Math.abs(percentOfMaxTilt)*minPower;
        
        double currentPositionLeft= m_driveTrain.getLeftEncoderPosition();
        double currentPositionRight= m_driveTrain.getRightEncoderPosition();

        double leftError= currentPositionLeft - lockPositionLeft;
        double rightError= currentPositionRight - lockPositionRight;

        double avgError= leftError + rightError/2;

        double forwardPower= -avgError;
        // if tilt is greater than 5 then set motors to minPower.
        /*if(Math.abs(tilt)>6){
            if (Math.abs(forwardPower)<minPower){
                forwardPower=(forwardPower/Math.abs(forwardPower))*minPower;
            }
        }*/
        // check if forward power is greater than the max power then set the forward power to the max power.


        double turnPower = 0; //MAY DO if not going straight Up then add some control on turn power.
        
        m_driveTrain.arcadeDrive(
            forwardPower /*power*/,
            turnPower /*turnpower*/
        );
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
